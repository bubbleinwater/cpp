/*
simple calculator


this program implements a basic expression calculator.
input from cin out to cout.

the grammer for input

Statement:
	Expression
	Print
	Quit
	sqrt()
	pow()
  =

Print:
	;

Quit:
	exit
  
  
  

Expression:
	Term
	Expression + Term
	Expression - Term

Term:
	Primary
	Term * Primary
	Term / Primary
	Term % Primary

Primary:
	Number
	( Expression )
	- Primary
	+ Primary

Number:
floating-point-literal

Input comes from sin through the Token_stream called ts.

*/

#include "std_lib_facilities.h"

class Token {
public:
	char kind;
	double value;
	string name;
	Token(char ch) :kind{ ch } {}
	Token(char ch, double val) :kind{ ch }, value{ val } {}
	Token(char ch, string n) :kind{ ch }, name{ n } {}
};

class Token_stream {
public:
	Token_stream() :full(0), buffer(0) { }

	Token get();
	void putback(Token t);
//	void unget(Token t) { buffer = t; full = true; }
	void ignore(char);

private:
	bool full;
	Token buffer;
};

const char let = '#';
const char quit = 'Q';
const char print = ';';
const char number = '8';
const char name = 'a';

Token_stream ts;
double expression();

Token Token_stream::get()
{
	if (full) { full = false; return buffer; }

	char ch;
	cin >> ch;
	switch (ch) {
	case '(':
	case ')':
	case '+':
	case '-':
	case '*':
	case '/':
	case '%':
	case print:
	case quit:
	case '=':
	case ',':
	case '#':
		return Token(ch);
	case '.':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	{
	cin.putback(ch);
	double val;
	cin >> val;
	return Token(number, val);
	}
	default:
		if (isalpha(ch) || ch == '_') {
			string s;
			s += ch;
			while (cin.get(ch) && ch != '(' && (isalpha(ch) || isdigit(ch))) { s += ch; }
			cin.putback(ch);
			if (s == "#") return Token(let);
			if (s == "exit") return Token(quit);
			if (s == "sqrt") {
				double d = expression(); 
				if (d < 0)error("square root does not exist");
				double val = sqrt(d);
			return Token(number,val); 
			}
			if (s == "pow") {
				double val1;
				double val2;
				Token t = ts.get();
				if (t.kind != '(')error("'(' expected.");
				t = ts.get();
				if (t.kind != number)error("num ber expected");
				val1 = t.value;
				t = ts.get();
				if (t.kind != ',')error("',' expected");
				t = ts.get();
				if (t.kind != number)error("num ber expected");
				val2 = t.value;
				t = ts.get();
				if (t.kind != ')')error("')' expected.");
				double d = pow(val1, val2);
				return Token(number, d);
			}
			return Token(name, s);
		}
		error("Bad token");
	}
}

void Token_stream::putback(Token t)
{
	if (full)error("putback() into a full buffer");
	buffer = t;		//copy t to buffer
	full = true;	//buffer is now full
}

void Token_stream::ignore(char c)
{
	if (full && c == buffer.kind) {
		full = false;
		return;
	}
	full = false;

	char ch;
	while (cin >> ch)
		if (ch == c) return;
}

class Variable {
public:
	string name;
	double value;
};

vector<Variable> var_table;

double get_value(string s)
{
	for (int i = 0; i<var_table.size(); ++i)
		if (var_table[i].name == s) return var_table[i].value;
	error("get: undefined name ", s);
}

void set_value(string s, double d)
{
	for (int i = 0; i <= var_table.size(); ++i)
		if (var_table[i].name == s) {
			var_table[i].value = d;
			return;
		}
	error("set: undefined name ", s);
}

bool is_declared(string s)
{
	for (int i = 0; i<var_table.size(); ++i)
		if (var_table[i].name == s) return true;
	return false;
}
double define_name(string var, double val)
{
	if (is_declared(var))error(var, " declared twice");
	var_table.push_back(Variable{ var,val });
	return val;
}


double primary()
{
	Token t = ts.get();
	switch (t.kind) {
	case '(':
	{
		double d = expression();
		t = ts.get();
		if (t.kind != ')') error("')' expected");
		return d;
	}
	case '-':
		return -primary();
	case '+':
		return primary();
	case number:
		return t.value;
	case name:
		return get_value(t.name);
	default:
		error("primary expected");
	}
}

double term()
{
	double left = primary();
	Token t = ts.get();
	while (true) {
		switch (t.kind) {
		case '*':
			left *= primary();
			t = ts.get();
			break;
		case '/':
		{	double d = primary();
		if (d == 0) error("divide by zero");
		left /= d;
		t = ts.get();
		break;
		}
		default:
			ts.putback(t);
			return left;
		}
	}
}

double expression()
{
	double left = term();
	while (true) {
		Token t = ts.get();
		switch (t.kind) {
		case '+':
			left += term();
			break;
		case '-':
			left -= term();
			break;
		default:
			ts.putback(t);
			return left;
		}
	}
}

double declaration()
{
	Token t = ts.get();
	if (t.kind != 'a') error("name expected in declaration");
	string name = t.name;
	if (is_declared(name)){
		Token t2 = ts.get();
		if (t2.kind != '=') error("= missing in declaration of ", name);
		double d = expression();
		for (Variable& x : var_table) { if (x.name == name) { x.value = d; } }
		return d;
	// error(name, " declared twice");
	}
	Token t2 = ts.get();
	if (t2.kind != '=') error("= missing in declaration of ", name);
	double d = expression();
	var_table.push_back(Variable{ name, d });
	return d;
}

double statement()
{
	Token t = ts.get();
	switch (t.kind) {
	case let:
		return declaration();
	default:
		ts.putback(t);
		return expression();
	}
}

void clean_up_mess()
{
	ts.ignore(print);
}

const string prompt = "> ";
const string result = "= ";

void calculate()
{
	while (cin) try {
		cout << prompt;
		Token t = ts.get();
		while (t.kind == print) t = ts.get();
		if (t.kind == quit) return;

		ts.putback(t);
		cout << result
			<< statement()
			<< '\n';
	}
	catch (runtime_error& e) {
		cerr << e.what() << '\n';
		clean_up_mess();
	}
}

int main()
try {
	define_name("k", 1000);
	calculate();

	return 0;
}
catch (exception& e) {
	cerr << "exception: " << e.what() << endl;
	char c;
	while (cin >> c && c != ';');
	return 1;
}
catch (...) {
	cerr << "exception\n";
	char c;
	while (cin >> c && c != ';');
	return 2;
}
