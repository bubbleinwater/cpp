exercise 2.

#include "std_lib_facilities.h"

//------------------------------------------------------------------------------

class Token{
public:
	char kind;        // what kind of token
	double value;     // for numbers: a value 
	Token(char ch)    // make a Token from a char
		:kind(ch), value(0) { }
	Token(char ch, double val)     // make a Token from a char and a double
		:kind(ch), value(val) { }
};

//------------------------------------------------------------------------------

class Token_stream {
public:
	Token_stream();   // make a Token_stream that reads from cin
	Token get();      // get a Token (get() is defined elsewhere)
	void putback(Token t);    // put a Token back
private:
	bool full;        // is there a Token in the buffer?
	Token buffer;     // here is where we keep a Token put back using putback()
};

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
	:full(false), buffer(0)    // no Token in buffer
{
}

//------------------------------------------------------------------------------

// The putback() member function puts its argument back into the Token_stream's buffer:
void Token_stream::putback(Token t)
{
	if (full) error("putback() into a full buffer");
	buffer = t;       // copy t to buffer
	full = true;      // buffer is now full
}

//------------------------------------------------------------------------------

Token Token_stream::get()
{
	if (full) {       // do we already have a Token ready?
					  // remove token from buffer
		full = false;
		return buffer;
	}

	char ch;
	cin >> ch;    // note that >> skips whitespace (space, newline, tab, etc.)

	switch (ch) {
	case '=':    // for "print"
	case 'x':    // for "quit"
	case '{':case '}':case '(': case ')': case '+': case '-': case '*': case '/':
		return Token(ch);        // let each character represent itself
	case '.':
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
	{
		cin.putback(ch);         // put digit back into the input stream
		double val;
		cin >> val;              // read a floating-point number
		return Token('8', val);   // let '8' represent "a number"
	}
	default:
		error("Bad token");
	}
}

//------------------------------------------------------------------------------

Token_stream ts;        // provides get() and putback() 

//------------------------------------------------------------------------------

double expression();    // declaration so that primary() can call expression()

//------------------------------------------------------------------------------

//deal with {, } . I call them pre_primary

double pre_primary() {
		double d = expression();
		Token t = ts.get();
		if (t.kind != '}') error("'}' expected");
		return d;
}

// deal with numbers and parentheses

double primary() {
	Token t = ts.get();
	while (true) {
		switch (t.kind) {
		case '{':
		{
			double left = pre_primary();
			return left;
		}
		case '(':    // handle '(' expression ')'
		{
			double d = expression();
			t = ts.get();
			if (t.kind != ')') error("')' expected");
			return d;
		}
		case '8':            // we use '8' to represent a number
			return t.value;  // return the number's value

		}
	}
}
//------------------------------------------------------------------------------

// deal with *, /
double term()
{
	double left = primary();
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '*':
			left *= primary();
			t = ts.get();
			break;
		case '/':
		{
			double d = primary();
			if (d == 0) error("divide by zero");
			left /= d;
			t = ts.get();
			break;
		}
		default:
			ts.putback(t);     // put t back into the token stream
			return left;
		}
	}
}

//------------------------------------------------------------------------------

// deal with + and -
double expression()
{
	double left = term();      // read and evaluate a Term
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '+':
			left += term();    // evaluate Term and add
			t = ts.get();
			break;
		case '-':
			left -= term();    // evaluate Term and subtract
			t = ts.get();
			break;
		default:
			ts.putback(t);     // put t back into the token stream
			return left;       // finally: no more + or -: return the answer
		}
	}
}

//------------------------------------------------------------------------------


int main()
try
{
	double val = 0;
	cout << "Welcome to our simple calculator.\nYou can use +,-,*,/,{,(,),}. And = for print,x for quit."<<"\nPlease enter expressions using floating-point numbers.\n";
	while (cin) {
		Token t = ts.get();

		if (t.kind == 'x') break; // 'x' for quit
		if (t.kind == '=')        // '=' for "print now"
			cout << "= " << val << '\n';
		else ts.putback(t); 

		val = expression();
	}
}
catch (exception& e) {
	cerr << "error: " << e.what() << '\n';
	cin.clear();
	cin.ignore();
	keep_window_open();
	return 1;
}
catch (...) {
	cerr << "Oops: unknown exception!\n";
	cin.clear();
	cin.ignore();
	keep_window_open();
	return 2;
}

//------------------------------------------------------------------------------


exercise 3.


#include "std_lib_facilities.h"

//------------------------------------------------------------------------------

class Token{
public:
	char kind;        // what kind of token
	double value;     // for numbers: a value 
	Token(char ch)    // make a Token from a char
		:kind(ch), value(0) { }
	Token(char ch, double val)     // make a Token from a char and a double
		:kind(ch), value(val) { }
};

//------------------------------------------------------------------------------

class Token_stream {
public:
	Token_stream();   // make a Token_stream that reads from cin
	Token get();      // get a Token (get() is defined elsewhere)
	void putback(Token t);    // put a Token back
private:
	bool full;        // is there a Token in the buffer?
	Token buffer;     // here is where we keep a Token put back using putback()
};

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
	:full(false), buffer(0)    // no Token in buffer
{
}

//------------------------------------------------------------------------------

// The putback() member function puts its argument back into the Token_stream's buffer:
void Token_stream::putback(Token t)
{
	if (full) error("putback() into a full buffer");
	buffer = t;       // copy t to buffer
	full = true;      // buffer is now full
}

//------------------------------------------------------------------------------

Token Token_stream::get()
{
	if (full) {       // do we already have a Token ready?
					  // remove token from buffer
		full = false;
		return buffer;
	}

	char ch;
	cin >> ch;    // note that >> skips whitespace (space, newline, tab, etc.)

	switch (ch) {
	case '=':    // for "print"
	case 'x':    // for "quit"
	case '!': case '{': case '}': case '(': case ')': case '+': case '-': case '*': case '/':
		return Token(ch);        // let each character represent itself
	case '.':
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
	{
		cin.putback(ch);         // put digit back into the input stream
		double val;
		cin >> val;              // read a floating-point number
		return Token('8', val);   // let '8' represent "a number"
	}
	default:
		error("Bad token");
	}
}

//------------------------------------------------------------------------------

Token_stream ts;        // provides get() and putback() 

//------------------------------------------------------------------------------

double expression();    // declaration so that primary() can call expression()

//------------------------------------------------------------------------------

//deal with {, } . I call them pre_primary

double pre_primary() {
		double d = expression();
		Token t = ts.get();
		if (t.kind != '}') error("'}' expected");
		t = ts.get();
		if(t.kind == '!')
		{
			int d_factorial = int(d);
			for (int i = 1; i < int(d); ++i) {
				d_factorial *= i;
		}
			return d_factorial;
		}
		ts.putback(t);
		return d;
}

// deal with numbers and parentheses

double primary() {
	Token t = ts.get();
	while (true) {
		switch (t.kind) {
		case '{':
		{
			double left = pre_primary();
			return left;
		}
		case '(':    // handle '(' expression ')'
		{
			double d = expression();
			t = ts.get();
			if (t.kind != ')') error("')' expected");
//----------------------
			t = ts.get();
			if (t.kind == '!')
			{
				int d_factorial = int(d);
				for (int i = 1; i < int(d); ++i) {
					d_factorial *= i;
				}
				return d_factorial;
			}
			ts.putback(t);
//----------------------
			return d;
		}
		case '8':            // we use '8' to represent a number
//----------------------
			double d = t.value;
			t = ts.get();
			if (t.kind == '!')
			{
				int d_factorial = int(d);
				for (int i = 1; i < int(d); ++i) {	// "for (int i = 1; i < d; ++i)" didn't work.
					d_factorial *= i;
				}
				return d_factorial;
			}
			ts.putback(t);
//----------------------
			return d;  // return the number's value

		}
	}
}
//------------------------------------------------------------------------------

// deal with *, /
double term()
{
	double left = primary();
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '*':
			left *= primary();
			t = ts.get();
			break;
		case '/':
		{
			double d = primary();
			if (d == 0) error("divide by zero");
			left /= d;
			t = ts.get();
			break;
		}
		default:
			ts.putback(t);     // put t back into the token stream
			return left;
		}
	}
}

//------------------------------------------------------------------------------

// deal with + and -
double expression()
{
	double left = term();      // read and evaluate a Term
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '+':
			left += term();    // evaluate Term and add
			t = ts.get();
			break;
		case '-':
			left -= term();    // evaluate Term and subtract
			t = ts.get();
			break;
		default:
			ts.putback(t);     // put t back into the token stream
			return left;       // finally: no more + or -: return the answer
		}
	}
}

//------------------------------------------------------------------------------


int main()
try
{
	double val = 0;
	cout << "Welcome to our simple calculator.\nYou can use +,-,*,/,{,(,),},! . And = for print,x for quit."<<"\nPlease enter expressions using floating-point numbers.\n";
	while (cin) {
		Token t = ts.get();

		if (t.kind == 'x') break; // 'x' for quit
		if (t.kind == '=')        // ';' for "print now"
			cout << "= " << val << '\n';
		else ts.putback(t); 

		val = expression();
	}
}
catch (exception& e) {
	cerr << "error: " << e.what() << '\n';
	cin.clear();
	cin.ignore();
	keep_window_open();
	return 1;
}
catch (...) {
	cerr << "Oops: unknown exception!\n";
	cin.clear();
	cin.ignore();
	keep_window_open();
	return 2;
}


//------------------------------------------------------------------------------

Exercise 4.				//yeeeeaaah yeeeeees I made it!!!


#include "std_lib_facilities.h"

class Name_value {
public:
	string name;
	int value;
	Name_value(string n,int val)
		:name(n),value(val){ }
};					//still, I totally don't understand what they do here.


int main()
{
	vector<Name_value>names_values;
	string name;
	int value;

	cout << "Please enter name and score.\n"
		<< "enter NoName and 0 for exit.\n";

	while (cin >> name >> value) {
		if (name == "NoName" && value == 0) { break; }

		if (names_values.size() == 0) {
			names_values.push_back(Name_value(name, value));
		}
		else {
			for (int i = 0; i < names_values.size(); ++i) {
				if (name == names_values[i].name) {
					simple_error("same name.");
				}
			}
			names_values.push_back(Name_value(name, value));
		}
	}

	for (int i = 0; i < names_values.size(); ++i) {
		cout << names_values[i].name << " " << names_values[i].value << "\n";
	}

	keep_window_open();
	return 0;
}


exercise 5.
//done.

exercise 6.

#include "std_lib_facilities.h"

//--the ----------

int article(string s) {

	if (s == "the" || s == "The")return 0;
	else error("something wrong.");
}


//--C++ birds fish dogs-------
int noun(string s) {
	if (s == "the" || s == "The") {
		int val = article(s);
		if (val != 0)error("something wrong");
		cin >> s;
	}

	if (s == "birds" || s == "fish" || s == "dogs" || s == "C++" )return 0;
	else return 1;
}

//--rules fly swim run-----
int verb(string s) {
	int val = noun(s);
	if (val == 1)return 1;
	cin >> s;
	if (s == "rules" || s == "fly" || s == "swim" || s == "run")return 0;
	else return 1;
}

//--and or but-------
int conjunctioin(string s) {
	int val = verb(s);
	if (val == 1)return 1;
	cin >> s;
	if (s == "and" || s == "or" || s == "but" ){cin >> s;val = verb(s);}
	cin >> s;
	if(s == ".")return 0;
	else return 1;
}


 int sentence(string s) {
	 int val = conjunctioin(s);
	 if(val == 0)return 0;
	 else if(val == 1) return 1;
}


int main()
{
	cout << "Please enter a sentence .(enter Ctrl + z for exit .)\n";

	string word = " ";
	while(cin >> word)
	{
		int ok_or_not = 0;
			ok_or_not = sentence(word);
			if(ok_or_not == 0)cout << "Ok\n";
			else cout << "not Ok.\n";
		
	}

	keep_window_open();
	return 0;
}

exercise 7.

//------ (T.T){ I know nothing about a bitwise logical expression
//------ (^_^){ after I understand them, I will do.


exercise 8.

#include "std_lib_facilities.h"

int main()
{

	cout << "Before we start this game, please give me one integer.(this makes the game exciting.)\n";
	while (true) {
		int n = 0;
		cin >> n;
		srand(n);
		vector<int>the_number(4);
		vector<char>the_letter(4);
		the_number[0] = randint(25);
		the_number[1] = randint(25);
		while (the_number[0] == the_number[1])
		{
			the_number[1] = randint(25);
		}
		the_number[2] = randint(25);
		while (the_number[0] == the_number[2] || the_number[1] == the_number[2])
		{
			the_number[2] = randint(25);
		}
		the_number[3] = randint(25);
		while (the_number[0] == the_number[3] || the_number[1] == the_number[3] || the_number[2] == the_number[3])
		{
			the_number[3] = randint(25);
		}

//integer for char.

		for (int i = 0; i < 4; ++i) 
		{
			switch (the_number[i]) {
			case 0:the_letter[i] = 'a';
				break;
			case 1:the_letter[i] = 'b';
				break;
			case 2:the_letter[i] = 'c';
				break;
			case 3:the_letter[i] = 'd';
				break;
			case 4:the_letter[i] = 'e';
				break;
			case 5:the_letter[i] = 'f';
				break;
			case 6:the_letter[i] = 'g';
				break;
			case 7:the_letter[i] = 'h';
				break;
			case 8:the_letter[i] = 'i';
				break;
			case 9:the_letter[i] = 'j';
				break;
			case 10:the_letter[i] = 'k';
				break;
			case 11:the_letter[i] = 'l';
				break;
			case 12:the_letter[i] = 'm';
				break;
			case 13:the_letter[i] = 'n';
				break;
			case 14:the_letter[i] = 'o';
				break;
			case 15:the_letter[i] = 'p';
				break;
			case 16:the_letter[i] = 'q';
				break;
			case 17:the_letter[i] = 'r';
				break;
			case 18:the_letter[i] = 's';
				break;
			case 19:the_letter[i] = 't';
				break;
			case 20:the_letter[i] = 'u';
				break;
			case 21:the_letter[i] = 'v';
				break;
			case 22:the_letter[i] = 'w';
				break;
			case 23:the_letter[i] = 'x';
				break;
			case 24:the_letter[i] = 'y';
				break;
			case 25:the_letter[i] = 'z';
				break;
			}

		}
//---------------------------------check
//		for (char x : the_letter)	cout << x;
//		cout << ".\n";
//---------------------------------

		int bull = 0;
		int cow = 0;

		vector<char>answer(4);
		cout << "We play 'Bulls and Cows'\n";
		while (bull != 4) {
			bull = 0;
			cow = 0;
			cout << "Please enter four different letters.\n";

			char temp = ' ';
			int check = 1;

// make sure that the player entered four different letters
			while (check != 0) {
				check = 0;

				for (int i = 0; i < 4; ++i) { cin >> temp; answer[i] = temp; }

				for (int i = 0; i < 4; ++i) {
					for (int j = 0; j < 4; ++j) {
						if (answer[i] == answer[j] && i != j) { ++check; }
					}
				}
				if (check != 0) { cout << "Please enter four different letters.\n"; }
			}


			for (int i = 0; i < 4; ++i) {
				for (int j = 0; j < 4; ++j) {
					if (the_letter[i] == answer[j] && i == j) {
						++bull;
					}
					else if (the_letter[i] == answer[j] && i != j) {
						++cow;
					}
				}
			}
			cout << "\"" << bull << "bull and " << cow << "cow" << "\"\n";
		}
		cout << "B I N G O!!\n";

		cout << "Before we start next game, please gime me another one integer.\n";
	}

	keep_window_open();
	return 0;
}

exercise 9.  //this version ,at this time,I don't know how to exit this program.

#include "std_lib_facilities.h"

int main()
{
	vector<char>num(4); //five digits throw out_of_range error.(I think.) 
	char temp = ' ';
	cout << "Please enter one number.(accept one,two,three,four digits.)\n";
	while(true){
		int i = 0;
		for (; cin >> temp; ++i) {
			if (temp != '|')num[i] = temp;
			else {
				--i;
				break;
			}
		}
		if (i == 0)
		{
			cout << num[0] << " is ";
			if (num[0] == '0')cout << num[0] << "one\n";
			else if (num[0] == '1')cout << num[1] << " one\n";
			else cout << num[0] << " ones\n";

		}
		else if(i ==1)
		{


			cout << num[0] << num[1] << " is ";
			if (num[0] == '1')
				cout << num[0] << " ten and ";
			else cout << num[0] << " tens and ";
			
			if (num[1] == '1')cout << num[1] << " one\n";
			else cout << num[1] << " ones\n";
		}
		else if (i == 2)
		{
			cout << num[0] << num[1] << num[2] <<" is ";
			
			if (num[0] == '1')
				cout << num[0] << " hundred and ";
			else cout << num[0] << " hundreds and ";

			if (num[1] == '1')cout << num[1] << " ten and ";
			else cout << num[1] << " tens and ";

			if (num[2] == '1')cout <<num[2]<< " one\n";
			else cout << num[2] << " ones\n";
		}
		else if (i == 3)
		{
			cout << num[0] << num[1] << num[2] << num[3] << " is ";
			if (num[0] == '1') 	cout << num[0] << " thousand and ";
			else cout << num[0] << " thousand and ";

			if (num[1] == '1') cout << num[1] << " hundred and "; 
			else cout << num[1] << " hundreds and ";

			if (num[2] == '1')cout << num[2] << " ten and ";
			else cout << num[2] << " tens and ";

			if (num[3] == '1')  cout << num[3] << " one\n"; 
			else cout << num[3] << " ones\n";
		}
	}

	keep_window_open();
	return 0;
}

exercise 10

#include "std_lib_facilities.h"

class value_error{};
class porc_error{};

int factorial(int x) {
	int answer = x;
	for (int i = 1; i < x; ++i) {
		answer *= i;
	}
	return answer;
}

int main()
try{
	cout << "permutations(press p) or combinations(press c)"
		<<"followed by two integers.\n";

	char p_or_c;
	int num1, num2;

	while (cin >> p_or_c) {
		if (!(p_or_c == 'p' || p_or_c == 'c'))throw porc_error();
		
		cin >> num1 >> num2;
		if (num1 < num2)throw value_error();
		if (p_or_c == 'p') {
			cout << "result: " << factorial(num1) / factorial(num1 - num2) << '\n';
		}
		else if (p_or_c == 'c') {
			cout << "result: " << factorial(num1) / factorial(num1 - num2) / factorial(num2) << '\n';
		}
	}

	keep_window_open();
	return 0;
}catch(value_error){
	cerr << "error: Please enter larger number first.\n";
	
	keep_window_open();			//I have to know what cin.clear(); and cin.ignore(); do.
	return 1;				//if the input like p 5 6 c 6 8, keep_window_open(); does not work as expected
}
catch (porc_error) {
	cerr << "error: Please enter p or c.\n";

	keep_window_open();
	return 2;
}
